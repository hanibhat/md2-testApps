package de.wwu.md2.library.controllers

/*
 * Main controller logic
 */
main {
	appVersion "0.1"
	// Model version to be updated when the data model changes (should be integers > 0)
	modelVersion "1"
	// A remote connection that deals with the management of cross-role workflows
	workflowManager wipc062
}

// Specifies a backend component
remoteConnection wipc062 {
	uri "http://wipc062.uni-muenster.de:8080/de.wwu.md2.library.backend/service"
}

// A content provider manages data storage/access
contentProvider Book bookProvider {
	// It can be either local or remote
	providerType local
}

contentProvider Book bookRetrievalProvider {
	providerType local
	// An additional filter can specify which element is retrieved on load
	filter first where Book.isbn equals MainView.bookInfoPart[Book.isbn]
}

contentProvider LoanRequest loanProvider {
	providerType local
}

// Multi-ContentProviders can store lists of elements
contentProvider Book[] allBooksProvider {
	providerType local
	filter all
}

WorkflowElement LoanWfe {
	// A default process chain needs to be given
	defaultProcessChain defaultChain
	
	// Actions to be performed when the workflow element is started
	onInit {
		bindEvents,
		mapFields
	}
	
	// A Process chan specifies a sequence of views 
	processChain defaultChain {
		step startChain:
			view MainView
	}
	
	// Custom actions can contain different action such as data bindings or click listeners
	action CustomAction bindEvents {
		bind action loadBook on MainView.ctrlPane.loadBookBtn.onClick
		bind action reset on MainView.ctrlPane.resetBtn.onClick
		bind action sendLoanRequest on MainView.loanBtn.onClick
	}
	
	action CustomAction mapFields {
		map MainView.loanEMail to :loanProvider.email
		// regex simplified and not accurate
		bind validator RegExValidator(regEx ".+@.+\\.[a-z]+") on MainView.loanEMail
	}
	
	action CustomAction loadBook {
		call ContentProviderOperation(load :bookRetrievalProvider)
	}
	
	action CustomAction reset {
	    // Create new object in the content provider
		call ContentProviderReset(:bookRetrievalProvider)
	}

	action CustomAction sendLoanRequest {
		// Assign the current book to the request
		set :loanProvider.bookRequested = :bookRetrievalProvider
		call ContentProviderOperation(save :loanProvider)
		call FireEvent(endWorkflowEvent)
	}
}

WorkflowElement CreateBookWfe {
	defaultProcessChain defaultChain
	
	onInit {
		bindEvents
	}
	
	processChain defaultChain {
		step startChain:
			view CreateView
	}
	
	action CustomAction bindEvents {
		bind action createBook on CreateView.createBtn.onClick
	}
	
	action CustomAction createBook {
	    call ContentProviderOperation(save :bookProvider)
	    call ContentProviderReset(:bookProvider)
	    call FireEvent(endWorkflowEvent)
	}
}

WorkflowElement BooklistWfe {
	defaultProcessChain defaultChain
	
	onInit {
		bindEvents,
		loadBooks
	}
	
	action CustomAction loadBooks {
		call ContentProviderOperation(load :allBooksProvider)
	}
	
	action CustomAction bindEvents {
		bind action returnAction on BookList.doneBtn.onClick
	}
	
	action CustomAction returnAction {
	    call FireEvent(endWorkflowEvent)
	}
	
	processChain defaultChain {
		step startChain:
			view BookList
	}
}